#!/usr/bin/env bash
# Bashism inject. Copyright (c) 2017, Jiri Kozlovsky

# Usage in scripts:
#
# . inject FUNCTION_NAME
#

# Note that FUNCTION_NAME is a function stored in either /usr/lib/bashism/injectable/ 
# or when created by superuser at /usr/local/lib/bashism/injectable for global use
# or created by current user in it's home directory ~/.bashism/injectable
# 
# First is checked the local directory (in case of a script override)

# Try for example ". inject getSudo" - this will inject getSudo function, which will
# attempt to obtain sudo from user launching your script (your script gets return code)


STDLIB="/usr/lib/bashism/injectable"
GLOBALLIB="/usr/local/lib/bashism/injectable"
LOCALLIB="~/.bashism/injectable"

assertIsSourced() {
	if test "${BASH_SOURCE[0]}" = "${0}"; then
		echo "You must source inject - using this syntax:" >&2
		echo ". inject $@" >&2
		return 1
	fi
	return 0
}

loadDependencies() {
	if test -z $_INJECTION_LIBS_LOADED; then
		_INJECTION_LIBS_LOADED=0

		# Load up BASH script detection
		. "$STDLIB/isBashScript"
	fi
}

main() {
	# Return non-zero status code if other than one argument provided
	if test "$#" -ne 1; then
		echo "Wrong 'inject' implementation - exactly one argument must be supplied !" >&2
		/bin/false
	else
		_inject "$@"
	fi
}

_inject() {
	local _LOCAL_DEST _STD_DEST

	_LOCAL_DEST="${LOCALLIB}/$1"
	_GLOBAL_DEST="${LOCALLIB}/$1"
	_STD_DEST="${STDLIB}/$1"

	if isBashScript "$_GLOBAL_DEST"; then
		source "$_GLOBAL_DEST"
	elif isBashScript "$_LOCAL_DEST"; then
		source "$_LOCAL_DEST"
	elif isBashScript "$_STD_DEST"; then
		source "$_STD_DEST"
	else
		echo "Function '$1' not found !" >&2
		/bin/false
	fi
}

# this script must be sourced to take effect ..
assertIsSourced "$@" || exit 2

# even inject script has some dependencies
loadDependencies

# run the injection ..
main "$@"
